// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

 
model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String  
  fullname String
  username    String
  password String 
  provider Provider @default(LOCAL)
  image String?
  phoneNumber String?
  course Course[]
  userAnswer UserAnswer[]
  userCourses Payment[]
  submissionFile SubmissionFile[]
  NPM String?
  golongan Golongan @default(UMUM)
  role Role @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?
  @@unique([email, provider, deletedAt])
  @@unique([provider, deletedAt, username])
}



model Batch {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  start_register DateTime
  end_register DateTime
  kuota Int

  // priceId String @db.ObjectId
  // price Price @relation(fields: [priceId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
    
  payment Payment[]
  batchCourse BatchCourse[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

}

model Price {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    price Float
    // Batch Batch[]
    type Golongan 
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    deletedAt   DateTime?
    @@unique([type, deletedAt])
}

model BatchCourse {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
 
  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
    batchId String @db.ObjectId
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
   createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

  @@unique([batchId, courseId, deletedAt])
}

model Course {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    name String
    category CourseCategory
    teacherId String @db.ObjectId
    teacher User @relation(fields: [teacherId], references: [id]) 
    batchCourse BatchCourse[]
    courseFolder CourseFolder[]
    link String?
    methode  CourseMethode
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    deletedAt   DateTime?
}

model CourseFolder {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    name  String
    courseId String @db.ObjectId
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
    courseFile CourseFile[]
    courseTask CourseTask[]
    pg PG[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    deletedAt   DateTime?
}

model CourseFile {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  file  String
  name String
  courseFolderId String @db.ObjectId
  courseFolder CourseFolder @relation(fields: [courseFolderId], references: [id] , onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime? 
}

model CourseTask {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  courseFolderId String @db.ObjectId
  courseFolder CourseFolder @relation(fields: [courseFolderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseTaskFile CourseTaskFile[]
  submissionFile SubmissionFile[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime? 
}

model CourseTaskFile {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  file  String
  name String
  courseTaskId String @db.ObjectId
  courseTask CourseTask @relation(fields: [courseTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime? 
}

// model CourseTaskSubmission {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
  
//   submission_status String?
//   grading_status String?

//   userId String @db.ObjectId
//   user User @relation(fields: [userId], references: [id])
//   courseTaskId String @db.ObjectId
//   courseTask CourseTask @relation(fields: [courseTaskId], references: [id])
//   submissionFile SubmissionFile[]
//   overdueAt   DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   deletedAt   DateTime? 
//   @@unique([courseTaskId, deletedAt])
// }

model SubmissionFile {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  file  String
  name String
  taskId String @db.ObjectId
  courseTask CourseTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime? 
}

// model UserCourses {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId String @db.ObjectId
//   user User @relation(fields: [userId], references: [id]) 
//   batchId String @db.ObjectId
//   batch Batch @relation(fields: [batchId], references: [id]) 
//   payment Payment[]
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   deletedAt   DateTime?
// }

model ProofPayment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  file  String
  name String
  paymentId String @db.ObjectId @unique
  payment Payment @relation(fields: [paymentId], references: [id],  onDelete: Cascade, onUpdate: Cascade) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime? 
}

model Payment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  bank String
  atas_nama String
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id],  onDelete: Cascade, onUpdate: Cascade) 
  batchId String @db.ObjectId
  batch Batch @relation(fields: [batchId], references: [id],  onDelete: Cascade, onUpdate: Cascade) 
  proofPayment ProofPayment?
  no_rek String
  status PaymentStatus @default(UNPAID)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

}

model PG {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  courseFolderId String @db.ObjectId
  courseFolder CourseFolder @relation(fields: [courseFolderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question Question[]
  points Int 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?
}

model Question {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  question String
  questionAnswer QuestionAnswer[]
  userAnswer UserAnswer[]
  pgId String @db.ObjectId
  pg PG @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
  // points Int 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?
}

model UserAnswer {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  questionAnswerId String @db.ObjectId
  questionAnswer QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
   questionId String @db.ObjectId
   question Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
   userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?
}

model QuestionAnswer {
   id      String   @id @default(auto()) @map("_id") @db.ObjectId
   answer String
   userAnswer UserAnswer[]
   isCorrect Boolean @default(false)
   questionId String @db.ObjectId
   question Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?

}
 

enum Golongan {
  ALUMNI
  UMUM
  MAHASISWA
}

enum CourseMethode {
  OFFLINE
  ONLINE
}

enum CourseCategory {
  KURSUS
  WORKSHOP
}

enum Provider {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum Role {
  SUPERADMIN
  ADMIN
  TEACHER
  STUDENT
}

enum PaymentStatus {
  PAID
  UNPAID
  PENDING
}
 